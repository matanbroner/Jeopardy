{"version":3,"sources":["components/Card.js","components/Table.js","components/QuestionsGenerator.js","components/App.js","index.js","assets/logo.png"],"names":["Card","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","question","generateQuestion","bind","assertThisInitialized","setState","e","solved","handleClick","react_default","a","createElement","className","onClick","React","PureComponent","uniqid","require","modalStyles","backgroundColor","color","padding","height","marginTop","borderRadius","teams","name","points","optionalTeams","Table","data","categories","rows","modal","reveal","answer","id","tally","questionCount","solvedQuestions","handleCardClick","resetModal","addTeam","removeTeam","count","forEach","category","push","concat","objectSpread","createGrid","questionModal","show","_this2","teamButtons","map","team","addPoints","key","style","lib_default","ref","title","transitionDuration","closeButtonStyle","display","dialogStyles","afterClose","headers","c","left","length","marginRight","fontSize","aria-hidden","renderCategories","isTie","tiedTeams","winner","toConsumableArray","Set","categoryIndex","questionIndex","_this3","teamName","arguments","undefined","currentTeams","findIndex","i","temp","questions","hide","newTeamIndex","pop","numRows","slice","j","newRow","item","createCards","cardsData","_this4","cards","components_Card","renderModal","renderTeams","renderGameArea","renderWinnerArea","QuestionsGenerator","modes","PLAY","QUESTIONS","HOME","App","questionData","mode","document","body","zoom","appData","src","logo","Button","components_Table","components_QuestionsGenerator","component","renderGameScreen","renderTitleScreen","renderQuestionsGenerator","ReactDOM","render","components_App","getElementById","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.dea11587.chunk.js","sourcesContent":["import React from 'react'\nimport '../assets/styles.css'\n\nclass Card extends React.PureComponent{\n    constructor(props){\n        super(props)\n\n        this.state = {\n            question: false\n        }\n\n        this.generateQuestion = this.generateQuestion.bind(this)\n    }\n\n    componentDidMount(){\n        this.setState({ question: this.props.question })\n    }\n\n    generateQuestion(e){\n        if(!this.state.question.solved)\n            {\n                this.props.handleClick(this.state.question)\n            }\n    }\n\n    render(){\n\n        return(\n            <div className=\"col-md-2\">\n                <div className=\"cardBody\" onClick={this.generateQuestion}>\n                    <div className={this.state.question.solved ? \"solvedCard\" : \"cardContent\"}>\n                        <span className=\"col-md-12 cardPoints\">\n                            {this.state.question[\"points\"]}\n                        </span>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n}\n\nexport default Card","import React from 'react'\nimport Card from './Card'\nimport '../assets/styles.css'\nimport SkyLight from 'react-skylight';\n\nvar uniqid = require('uniqid') // for custom array keys\n\nvar modalStyles = {\n    backgroundColor: '#7db2e0',\n    color: '#ffffff',\n    padding: '50px',\n    height: '500px',\n    marginTop: '-300px',\n    borderRadius: '10px'\n  };\n\n\nvar teams = [\n    {\n        name: \"קבוצה האדומה\",\n        color: \"#FF0000\",\n        points: 0\n    },\n    {\n        name: \"קבוצה הכחולה\",\n        color: \"#0000FF\",\n        points: 0\n    }\n]\n\nvar optionalTeams = [\n    {\n        name: \"קבוצה הכתומה\",\n        color: \"#ff8e1c\",\n        points: 0\n    },\n    {\n        name: \"קבוצה הסגולה\",\n        color: \"#b91bf9\",\n        points: 0\n    },\n    {\n        name: \"קבוצה הורודה\",\n        color: \"#ff00b4\",\n        points: 0\n    }\n]\n\n\nclass Table extends React.PureComponent{\n    constructor(props){\n        super(props)\n\n        this.state = {\n            data: null,\n            categories: null,\n            rows: null,\n            modal: {\n                reveal: false,\n                question: null,\n                answer: null,\n                points: null,\n                id: null\n            },\n            tally:{\n                questionCount: 0,\n                solvedQuestions: 0\n            }\n        }\n        this.handleCardClick = this.handleCardClick.bind(this)\n        this.resetModal = this.resetModal.bind(this)\n        this.addTeam = this.addTeam.bind(this)\n        this.removeTeam = this.removeTeam.bind(this)\n    }\n\n    componentDidMount(){\n        let categories = []\n        let count = 0\n        let data = this.props.data\n        data.forEach(category => {\n            categories.push(category[\"category\"])\n            category[\"questions\"].forEach(question => { count++; question.solved = false; question.id = uniqid() })\n        }) \n        this.setState({\n            categories: [].concat(categories),\n            data: data,\n            teams: [].concat(teams),\n            tally: {...this.state.tally, questionCount: count},\n        }, function(){\n            this.createGrid()\n        })\n    }\n\n    handleCardClick(question){\n        let modal = {...this.state.modal}\n        modal.question = question.question\n        modal.answer = question.answer\n        modal.points = question.points\n        modal.id = question.id;\n        this.setState({ modal })\n        this.questionModal.show()\n    }\n\n    resetModal(){\n        this.setState({\n            modal: {...this.state.modal, reveal: false}\n        })\n    }\n\n    renderModal(){\n        let teamButtons = this.state.teams.map(team => {\n            return(\n                <button \n                onClick={() => this.addPoints(team.name)}\n                key={team.color}\n                className=\"modalButton\" \n                style={{backgroundColor: `${team.color}`}}>{team.name}</button>\n            )\n        })\n        teamButtons.push(\n            <button \n            onClick={() => this.addPoints()}\n            key={uniqid()}\n            className=\"modalButton\" \n            style={{backgroundColor: \"#909090\"}}>אין נקודות</button>\n        )\n        return(\n            <div>\n                <SkyLight \n                ref={ref => this.questionModal = ref} \n                title={<h4 className=\"modalTitle\">{this.state.modal.points} Points</h4>}\n                transitionDuration={1000} \n                closeButtonStyle={{display: \"none\"}}\n                dialogStyles={modalStyles}\n                afterClose={this.resetModal}\n                >\n                    <div className=\"modalQuestion\">שאלה: {this.state.modal.question}</div>\n                    <hr className=\"modalHorizontalRule\"/>\n                    <div className={this.state.modal.reveal \n                    ?\"answerReveal\"\n                    :\"answerHidden\"\n                    }>\n                    <div className=\"col-md-12 modalAnswer\">תשובה: {this.state.modal.answer}</div>\n                    \n                    </div>\n                    <div className=\"modalButtonRow\">\n                        {this.state.modal.reveal \n                        ? teamButtons \n                        : <button \n                            style={{backgroundColor: \"#17b559\"}}\n                            className=\"modalButton\"  \n                            onClick={() => this.setState({modal: {...this.state.modal, reveal: true}})}>\n                            גלה תשובה\n                            </button>\n                        }\n                    </div>\n                </SkyLight>\n            </div>\n        )\n    }\n\n    renderCategories(){\n        if(this.state.categories){\n            let headers = this.state.categories.map(c => {\n                // style aspect centers short headers\n            return <h5 key={uniqid()} className=\"col-md-2 header\" style={{left: `${c.length <= 10 ? '1%' : '0%'}`}}>{c}</h5>\n            })\n            return(\n                <div className=\"col-md-11 tableRow\">\n                    {headers}\n                </div>\n            )\n        }\n    }\n\n    renderTeams(){\n        if(this.state.teams)\n        {\n            let teamsPoints = this.state.teams.map(team => {\n            return(\n                <div key={team.color} className=\"col-md-2\">\n                    <div className=\"pointsMain\">\n                        <div className=\"pointsHeader\">\n                            <span style={{marginRight: \"10px\"}}>{team.name}</span>\n                            <i \n                            style={{color: `${team.color}`, fontSize: \"20px\"}}\n                            className=\"fa fa-user\" \n                            aria-hidden=\"true\"></i>\n                        </div>\n                        <div className=\"pointsDisplay\">\n                            {team.points}\n                        </div>\n                    </div>\n                </div>\n            )\n        })\n\n        return teamsPoints\n        }\n    }\n\n    renderGameArea(){\n        return(\n            <div className=\"mainGameArea\">\n                {this.renderCategories()}\n                {this.state.rows}\n            </div>\n        )\n    }\n    \n    renderWinnerArea(){\n        let renderTiedTeams = (teams) => {\n            teams = [...new Set(teams)]\n            return teams.map(team => {\n                return (\n                    <div className=\"col\" style={{backgroundColor:`${team.color}`}} key={uniqid()}>\n                        <div className=\"col-md-12 winnerText\">{team.name} tied! <i className=\"fa fa-thumbs-up\" aria-hidden=\"true\"></i></div>\n                    </div>\n                )\n            })\n        }\n        let isTie = false\n        let tiedTeams = []\n        let winner = null\n        this.state.teams.forEach(team => {\n            if(!winner)\n                winner = team\n            else if(team.points === winner.points) {\n                isTie = true\n                tiedTeams.push(winner, team)\n                winner = team\n            }\n            else if (team.points > winner.points){\n                isTie = false\n                tiedTeams = []\n                winner = team\n            }\n        })\n        return(\n            !isTie \n            ? <div className=\"winnerArea col-md-12\" style={{backgroundColor:`${winner.color}`}}>\n                <div className=\"col-md-12 winnerText\">ה{winner.name} נצחה! <i className=\"fa fa-trophy\" aria-hidden=\"true\"></i></div>\n            </div>\n            \n            : <div className=\"winnerArea\">\n                <div className=\"row\">\n                    {renderTiedTeams(tiedTeams)}\n                </div>\n            </div>\n        )\n    }\n\n    addPoints(teamName= null){\n        let currentTeams = [].concat(this.state.teams)\n        if(teamName){\n            // Add points to team\n            let teamIndex = this.state.teams.findIndex(team => team.name === teamName)\n            currentTeams[teamIndex].points += this.state.modal.points;\n        }\n        \n        // Eliminate question\n        let categoryIndex, questionIndex\n        for (let i = 0; i < this.state.categories.length; i++){\n            let temp = this.state.data[i].questions.findIndex(question => question.id === this.state.modal.id)\n            if(temp >= 0){\n                questionIndex = temp\n                categoryIndex = i\n                break\n            }\n        }\n        let data = [].concat(this.state.data)\n        data[categoryIndex].questions[questionIndex].solved = true\n\n        //Tally solved question and save all data\n        let solved = this.state.tally.solvedQuestions\n        this.setState({teams: currentTeams, data: data, tally: {...this.state.tally, solvedQuestions: ++solved}}, function() {this.createGrid()})\n\n        this.questionModal.hide()\n    }\n\n    addTeam(){\n        if(this.state.teams.length < (teams.length + optionalTeams.length)){\n            let newTeamIndex = this.state.teams.length - teams.length;\n            let currentTeams = [...this.state.teams]\n            currentTeams.push(optionalTeams[newTeamIndex])\n            this.setState({\n                teams: [...currentTeams]\n            })\n        }\n    }\n\n    removeTeam(){\n        if(this.state.teams.length > 2){\n            let currentTeams = [...this.state.teams]\n            currentTeams.pop()\n            this.setState({teams: [...currentTeams]})\n        }\n    }\n\n    createGrid(){\n        // get first question set, take last question, check max points, divide by 100 for row count\n        let numRows = (this.state.data[0][\"questions\"].slice(-1)[0][\"points\"]) / 100\n        let rows = []\n        for (let j= 0; j < numRows; j++){\n            let newRow = []\n            for (let i= 0; i < this.state.categories.length; i++){\n                let item = this.state.data[i][\"questions\"][j]\n                newRow.push(item)\n            }\n            rows.push(this.createCards(newRow))\n        }\n        this.setState({ rows: rows })\n    }\n\n    createCards(cardsData){\n        let cards = cardsData.map(question => {\n            return <Card key={uniqid()} question= {question} handleClick={this.handleCardClick}/>\n        })\n\n        return (\n            <div key={uniqid()} className=\"col-md-11 tableRow\">\n                {cards}\n            </div>\n        )\n    }\n\n    render(){\n        let solved = this.state.tally.solvedQuestions\n        return(\n            <div>\n                {this.state.teams ? this.renderModal() : null}\n                <div className=\"pointsBar col-md-12\">\n                <div className=\"teamChange\" onClick={this.removeTeam}><i className=\"fa fa-minus-circle\" aria-hidden=\"true\"></i></div>\n                    {this.renderTeams()}\n                <div className=\"teamChange\" onClick={this.addTeam}><i className=\"fa fa-plus-circle\" aria-hidden=\"true\"></i></div>\n                </div>\n                {  solved !== this.state.tally.questionCount || solved === 0\n                    ? this.renderGameArea()\n                    : this.renderWinnerArea()\n                }\n            </div>\n        )\n    }\n}\n\nexport default Table","import React from \"react\";\n\nclass QuestionsGenerator extends React.PureComponent {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return <div>QuestionsGenerator</div>;\n  }\n}\n\nexport default QuestionsGenerator;\n","import React from \"react\";\nimport appData from \"../assets/data.json\";\nimport logo from \"../assets/logo.png\";\nimport Table from \"./Table\";\nimport QuestionsGenerator from \"./QuestionsGenerator\";\nimport {\n    Button\n} from 'react-bootstrap'\n\nconst modes = {\n  PLAY: \"play\",\n  QUESTIONS: \"questions\",\n  HOME: \"home\",\n};\n\nclass App extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      questionData: null,\n      mode: modes.HOME,\n    };\n    document.body.style.zoom = \"80%\";\n  }\n\n  componentDidMount() {\n    this.setState({\n      questionData: appData[\"data\"],\n    });\n  }\n\n  renderTitleScreen() {\n    return (\n        <div className=\"col-md-12 titleScreen\">\n          <img className=\"titleLogo\" src={logo} />\n          <br />\n          <div className=\"playScreenText\">Welcome to Purim Jeopardy!</div>\n          <br />\n          <div id=\"homeButtonGroup\">\n            <Button \n            onClick={() => this.setState({ mode: modes.PLAY })}\n            className=\"playScreenButton\">\n                Start Game\n            </Button>\n            <Button \n            onClick={() => this.setState({ mode: modes.QUESTIONS })}\n            className=\"playScreenButton\">\n                Create Questions\n            </Button>\n          </div>\n        </div>\n    );\n  }\n\n  renderGameScreen() {\n    return (\n      <div>\n        <h1 className=\"gameTitle col-md-12\">\n          Pesach Jeopardy! <img className=\"headerLogo\" src={logo} />\n        </h1>\n        {this.state.questionData ? (\n          <Table data={this.state.questionData} />\n        ) : null}\n      </div>\n    );\n  }\n\n  renderQuestionsGenerator() {\n    return (\n      <div>\n        <QuestionsGenerator />\n      </div>\n    );\n  }\n\n  render() {\n    let component;\n    switch (this.state.mode) {\n      case modes.PLAY:\n        component = this.renderGameScreen();\n        break;\n      case modes.HOME:\n        component = this.renderTitleScreen();\n        break;\n      case modes.QUESTIONS:\n        component = this.renderQuestionsGenerator();\n        break;\n    }\n    return <div>{component}</div>;\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));","module.exports = __webpack_public_path__ + \"static/media/logo.84a9b23b.png\";"],"sourceRoot":""}